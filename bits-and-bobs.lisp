(defun primep (p)
  (let ((divisor -1))
    (do ((x 2 (+ x 1)))
	((> x p) divisor)
      (setf divisor (mod p x))
      (if (and (equal divisor 0) (< x p))
	  (progn 
	    (format t "Not a prime~%") 
	    (return))
	  (progn
	    (format t "~A is a prime" p)
	    (return))))))

(defun primep (p)
  (let ((divisor -1))
    (do ((x 2 (+ x 1)))
	((> x p) divisor)
      (setf divisor (mod p x))
      (if (and (equal divisor 0) (< x p))
	  (return nil)
	  (return t)))))
